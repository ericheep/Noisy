//-----------------------------------------------------------------------------
// Entaro ChucK Developer!
// This is a Chugin boilerplate, generated by chugerate!
//-----------------------------------------------------------------------------

// this should align with the correct versions of these ChucK files
#include "chuck_dl.h"
#include "chuck_def.h"

// general includes
#include <stdio.h>
#include <limits.h>
#include <cmath>

// declaration of chugin constructor
CK_DLL_CTOR(noisy_ctor);
// declaration of chugin desctructor
CK_DLL_DTOR(noisy_dtor);

// example of getter/setter
CK_DLL_MFUN(noisy_setParam);
CK_DLL_MFUN(noisy_getParam);

// for Chugins extending UGen, this is mono synthesis function for 1 sample
CK_DLL_TICK(noisy_tick);

// this is a special offset reserved for Chugin internal data
t_CKINT noisy_data_offset = 0;


// class definition for internal Chugin data
// (note: this isn't strictly necessary, but serves as example
// of one recommended approach)
class Noisy
{
public:
    // constructor
    Noisy( t_CKFLOAT fs)
    {
        m_param = 0;
    }

    // for Chugins extending UGen
    SAMPLE tick( SAMPLE in )
    {
        double sigma = 1.0;
        double mu = 0.0;
        const double epsilon = std::numeric_limits<double>::min();
        const double two_pi = 2.0*3.14159265358979323846;

        static double z0, z1;
        static bool generate;
        generate = !generate;

        if (!generate)
           return z1 * sigma + mu;

        double u1, u2;
        do
         {
           u1 = rand() * (1.0 / RAND_MAX);
           u2 = rand() * (1.0 / RAND_MAX);
         }
        while ( u1 <= epsilon );

        z0 = sqrt(-2.0 * log(u1)) * cos(two_pi * u2);
        z1 = sqrt(-2.0 * log(u1)) * sin(two_pi * u2);
        return z0 * sigma + mu;
    }

    // set parameter example
    float setParam( t_CKFLOAT p )
    {
        m_param = p;
        return p;
    }

    // get parameter example
    float getParam() { return m_param; }

private:
    // instance data
    float m_param;
};


// query function: chuck calls this when loading the Chugin
// NOTE: developer will need to modify this function to
// add additional functions to this Chugin
CK_DLL_QUERY( Noisy )
{
    // hmm, don't change this...
    QUERY->setname(QUERY, "Noisy");

    // begin the class definition
    // can change the second argument to extend a different ChucK class
    QUERY->begin_class(QUERY, "Noisy", "UGen");

    // register the constructor (probably no need to change)
    QUERY->add_ctor(QUERY, noisy_ctor);
    // register the destructor (probably no need to change)
    QUERY->add_dtor(QUERY, noisy_dtor);

    // for UGen's only: add tick function
    QUERY->add_ugen_func(QUERY, noisy_tick, NULL, 1, 1);

    // NOTE: if this is to be a UGen with more than 1 channel,
    // e.g., a multichannel UGen -- will need to use add_ugen_funcf()
    // and declare a tickf function using CK_DLL_TICKF

    // example of adding setter method
    QUERY->add_mfun(QUERY, noisy_setParam, "float", "param");
    // example of adding argument to the above method
    QUERY->add_arg(QUERY, "float", "arg");

    // example of adding getter method
    QUERY->add_mfun(QUERY, noisy_getParam, "float", "param");

    // this reserves a variable in the ChucK internal class to store
    // referene to the c++ class we defined above
    noisy_data_offset = QUERY->add_mvar(QUERY, "int", "@n_data", false);

    // end the class definition
    // IMPORTANT: this MUST be called!
    QUERY->end_class(QUERY);

    // wasn't that a breeze?
    return TRUE;
}


// implementation for the constructor
CK_DLL_CTOR(noisy_ctor)
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT(SELF, noisy_data_offset) = 0;

    // instantiate our internal c++ class representation
    Noisy * n_obj = new Noisy(API->vm->get_srate());

    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT(SELF, noisy_data_offset) = (t_CKINT) n_obj;
}


// implementation for the destructor
CK_DLL_DTOR(noisy_dtor)
{
    // get our c++ class pointer
    Noisy * n_obj = (Noisy *) OBJ_MEMBER_INT(SELF, noisy_data_offset);
    // check it
    if( n_obj )
    {
        // clean up
        delete n_obj;
        OBJ_MEMBER_INT(SELF, noisy_data_offset) = 0;
        n_obj = NULL;
    }
}


// implementation for tick function
CK_DLL_TICK(noisy_tick)
{
    // get our c++ class pointer
    Noisy * n_obj = (Noisy *) OBJ_MEMBER_INT(SELF, noisy_data_offset);

    // invoke our tick function; store in the magical out variable
    if(n_obj) *out = n_obj->tick(in);

    // yes
    return TRUE;
}


// example implementation for setter
CK_DLL_MFUN(noisy_setParam)
{
    // get our c++ class pointer
    Noisy * n_obj = (Noisy *) OBJ_MEMBER_INT(SELF, noisy_data_offset);
    // set the return value
    RETURN->v_float = n_obj->setParam(GET_NEXT_FLOAT(ARGS));
}


// example implementation for getter
CK_DLL_MFUN(noisy_getParam)
{
    // get our c++ class pointer
    Noisy * n_obj = (Noisy *) OBJ_MEMBER_INT(SELF, noisy_data_offset);
    // set the return value
    RETURN->v_float = n_obj->getParam();
}
